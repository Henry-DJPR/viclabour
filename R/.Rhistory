o_update <- table_meta[, .(update = series_req_update(series_id)), table_name]
to_update <- to_update[update == TRUE, table_name]
to_update <- table_meta[, .(update = series_req_update(series_id)), table_name]
to_update <- to_update[update == TRUE, table_name]
x <- table_meta
series_ids = x$series_id
row_headers = x$name
highlight_rows = x$highlight
smoothing = x$smoothing_months
notes = x$caption
rm(x)
conn <- con
# Collapse caption
notes <- paste(unique(notes), collapse = " ")
# Get data
df <- dbGetQuery(
conn = conn,
statement =
paste0(
'SELECT *',
'FROM "abs_labour_force"',
"WHERE series_id IN ('",
paste0(series_ids, collapse = "', '"),
"')"
)
)
# Ensure correct data ordering
setDT(df)
df[, series_id := factor(series_id, levels = series_ids)]
setkey(df, series_id, date)
# God I HATE it when databased information is in thousands
df[unit == "000",       value := value * 1000]
df[unit == "000 Hours", value := value * 1000]
df[, unit := NULL]
# Smooth data
smoothing[is.na(smoothing)] <- 1
df[, smoothing := smoothing[match(series_id, series_ids)]]
df[, value2 := frollmean(value, smoothing[1]), series_id]
# Check time interval
interval <- df[, unique(frequency)]
if(length(interval) > 1) stop(
"Tables can only have one frequency (e.g. not monthly AND quarterly)"
)
# Generate sparklines
sparkdata <- df[
date >= max(date) - months(12 * 3),
tapply(value, series_id, sparkline)
]
mapply(
function(svg, name){writeLines(svg, path_sparkline(name))},
svg = sparkdata,
name = names(sparkdata)
)
sparktext <- df[
date > max(date) - months(12 * 3),
.(
current = last(value),
average = mean(value, na.rm = TRUE),
name = tolower(row_headers[match(series_id[1], series_ids)]),
up_is_good = up_is_good[match(series_id[1], series_ids)]
),
series_id
]
table_meta
up_is_good <- table_meta$up_is_good
sparktext <- df[
date > max(date) - months(12 * 3),
.(
current = last(value),
average = mean(value, na.rm = TRUE),
name = tolower(row_headers[match(series_id[1], series_ids)])
),
series_id
]
sparktext[
, `:=`(
name = fcase(
grepl("rate|ratio", name), paste("The", name, "is"),
grepl("persons", name), paste("The number of", name, "is"),
grepl("employed ", name), paste("The number of people", name, "is"),
rep(TRUE, .N), paste0(toupper(substring(name, 1,1)), substring(name, 2)," is")
),
movement = fifelse(
current >= average,
"higher than average",
"lower than average"
)
)
]
sparktext[, alt := paste(name, movement)]
# Get interval dates
breaks <- c(
current =  df[, max(date)],
last    = df[, max(date[date != max(date)])],
year    = df[, max(date) - months(12)],
covid   = as.Date("2019-03-01")
)
date_latest <- df[, max(date)]
date_last   <- df[, max(date[date != max(date)])]
date_year   <- df[, max(date) - months(12)]
date_covid  <- as.Date("2019-03-01")
# Generate deltas
deltas <- df[date %in% breaks]
deltas[, date := names(breaks)[match(date, breaks)]]
deltas[, date := factor(date, levels = names(breaks))]
deltas <- dcast(deltas, series_id + data_type ~ date, value.var = "value")
diff_cols <- names(breaks)[names(breaks) != "current"]
deltas[, (diff_cols) := lapply(.SD, \(x) current - x), .SDcols = diff_cols]
# Generate current backgrounds
avg_3_year <- df[
date >= max(date) - months(12 * 3),
.(avg  = mean(value)),
keyby = series_id
]
backgrounds <- deltas[avg_3_year][,
`:=`(
up_is_good = up_is_good[match(series_id, series_ids)],
current = current - avg,
avg = NULL,
data_type = NULL
)
][,
(names(breaks)) := lapply(.SD, \(x){
fifelse(
(x >= 0 & up_is_good) | (x <= 0 & !up_is_good),
"bg-success",
"bg-danger"
)
}),
.SDcols = names(breaks)
][,
up_is_good := NULL
]
backgrounds <- melt.data.table(
data = backgrounds,
id.vars = "series_id",
measure.vars = names(breaks),
variable.name = "date",
value.name = "bg"
)
backgrounds
backgrounds <- deltas[avg_3_year][,
`:=`(
up_is_good = up_is_good[match(series_id, series_ids)],
current = current - avg,
avg = NULL,
data_type = NULL
)
][,
(names(breaks)) := lapply(.SD, \(x){
fifelse(
(x >= 0 & up_is_good) | (x <= 0 & !up_is_good),
"table-success",
"table-danger"
)
}),
.SDcols = names(breaks)
][,
up_is_good := NULL
]
backgrounds <- melt.data.table(
data = backgrounds,
id.vars = "series_id",
measure.vars = names(breaks),
variable.name = "date",
value.name = "bg"
)
backgrounds
deltas[, current := format_any(current, data_type)]
deltas[data_type == "PERCENT", data_type := "PPT"]
deltas[,
(diff_cols) := lapply(.SD, format_any, form = data_type),
.SDcols = diff_cols
]
deltas[, data_type := NULL]
# Convert to HTML table
tdeltas <- as.data.table(t(deltas))
rows <- sapply(tdeltas, function(x){
row_title     <- row_headers[match(x[1], series_ids)]
row_content   <- x[2:length(x)]
row_highlight <- highlight_rows[match(row_title, row_headers)]
alt_text      <- sparktext$alt[match(x[1], sparktext$series_id)]
row_classes   <- backgrounds[series_id == x[1], bg]
if(row_highlight){
tr(
class = "border-top",
th(row_title, scope = "row"),
td(
img(
src = paste0("./sparklines/", x[1], ".svg"),
alt = alt_text,
class = "img-fluid sparkline float-start"
)
),
mapply(td, row_content, class = row_classes)
)
} else {
tr(
class = "subrow",
th(row_title, scope = "row"),
td(
img(
src = paste0("./sparklines/", x[1], ".svg"),
alt = alt_text,
class = "img-fluid sparkline float-start"
)
),
lapply(row_content, td)
)
}
})
rows <- tbody(rows)
deltas[, current := format_any(current, data_type)]
breaks
header <- thead(
td(""),
th(
class = "text-start",
scope = "col",
"Recent trend",
br(),
small(
class = "text-muted p-0",
"Last 3 years"
)
),
th(
scope = "col",
"Latest figures",
br(),
small(
class = "text-muted p-0",
format(breaks["current"], "%b&nbsp;%Y")
)
),
th(
scope = "col",
paste("One", tolower(interval), "change"),
br(),
small(
class = "text-muted p-0",
format(breaks["last"], "%b&nbsp;%Y")
)
),
th(
scope = "col",
"One year change",
br(),
small(
class = "text-muted p-0",
format(breaks["year"], "%b&nbsp;%Y")
)
),
th(
scope = "col",
"Change since COVID&#8209;19",
br(),
small(
class = "text-muted p-0",
format(breaks["covid"], "%b&nbsp;%Y")
)
)
)
table_tag(
class = table_class,
caption(notes),
header,
rows
)
table_class = "table table-hover table-borderless"
table_tag(
class = table_class,
caption(notes),
header,
rows
)
source("C:/JSprojects/viclabour/R/functions.R", echo=TRUE)
# Generate tables
if(length(to_update) > 0){
message(
"Updating the following website tables:\n",
paste(to_update, collapse = "\n")
)
table_list <- split(
table_meta[table_name %in% to_update],
by = "table_name"
)
table_list <- lapply(table_list, \(x){
make_table(
series_ids = x$series_id,
row_headers = x$name,
highlight_rows = x$highlight,
smoothing = x$smoothing_months,
notes = x$caption
)
})
mapply(
function(table, table_name){
path <- path_src(paste0("Table", table_name, ".svelte"))
writeLines(table, path)
},
table = table_list,
table_name = names(table_list)
)
}
# Generate tables
if(length(to_update) > 0){
message(
"Updating the following website tables:\n",
paste(to_update, collapse = "\n")
)
table_list <- split(
table_meta[table_name %in% to_update],
by = "table_name"
)
table_list <- lapply(table_list, \(x){
make_table(
series_ids = x$series_id,
row_headers = x$name,
highlight_rows = x$highlight,
smoothing = x$smoothing_months,
up_is_good = x$up_is_good,
notes = x$caption
)
})
mapply(
function(table, table_name){
path <- path_src(paste0("Table", table_name, ".svelte"))
writeLines(table, path)
},
table = table_list,
table_name = names(table_list)
)
}
source("C:/JSprojects/viclabour/R/functions.R", echo=TRUE)
# Generate tables
if(length(to_update) > 0){
message(
"Updating the following website tables:\n",
paste(to_update, collapse = "\n")
)
table_list <- split(
table_meta[table_name %in% to_update],
by = "table_name"
)
table_list <- lapply(table_list, \(x){
make_table(
series_ids = x$series_id,
row_headers = x$name,
highlight_rows = x$highlight,
smoothing = x$smoothing_months,
up_is_good = x$up_is_good,
notes = x$caption
)
})
mapply(
function(table, table_name){
path <- path_src(paste0("Table", table_name, ".svelte"))
writeLines(table, path)
},
table = table_list,
table_name = names(table_list)
)
}
source("C:/JSprojects/viclabour/R/functions.R", echo=TRUE)
# Generate tables
if(length(to_update) > 0){
message(
"Updating the following website tables:\n",
paste(to_update, collapse = "\n")
)
table_list <- split(
table_meta[table_name %in% to_update],
by = "table_name"
)
table_list <- lapply(table_list, \(x){
make_table(
series_ids = x$series_id,
row_headers = x$name,
highlight_rows = x$highlight,
smoothing = x$smoothing_months,
up_is_good = x$up_is_good,
notes = x$caption
)
})
mapply(
function(table, table_name){
path <- path_src(paste0("Table", table_name, ".svelte"))
writeLines(table, path)
},
table = table_list,
table_name = names(table_list)
)
}
dbDisconnect(con)
djprtheme::djpr_pal(10)
cat(paste0(djprtheme::djpr_pal(10), collapse = '"\n"'))
?tapply
?data.table
?data.table::.N
source("C:/JSprojects/viclabour/R/functions.R", echo=TRUE)
source("C:/JSprojects/viclabour/R/functions.R", echo=TRUE)
if(length(to_update) > 0){
message(
"Updating the following website tables:\n",
paste(to_update, collapse = "\n")
)
table_list <- split(
table_meta[table_name %in% to_update],
by = "table_name"
)
table_list <- lapply(table_list, \(x){
make_table(
series_ids = x$series_id,
row_headers = x$name,
highlight_rows = x$highlight,
smoothing = x$smoothing_months,
up_is_good = x$up_is_good,
notes = x$caption
)
})
mapply(
function(table, table_name){
path <- path_src(paste0("Table", table_name, ".svelte"))
writeLines(table, path)
},
table = table_list,
table_name = names(table_list)
)
}
# Connect to database
con <- dbConnect(
drv = Postgres(),
dbname = "opendata",
user = Sys.getenv("PG_READ_OPEN_USER"),
password  = Sys.getenv("PG_READ_OPEN_PW"),
host = db_location$host,
port = db_location$port
)
conn <- con
if(length(to_update) > 0){
message(
"Updating the following website tables:\n",
paste(to_update, collapse = "\n")
)
table_list <- split(
table_meta[table_name %in% to_update],
by = "table_name"
)
table_list <- lapply(table_list, \(x){
make_table(
series_ids = x$series_id,
row_headers = x$name,
highlight_rows = x$highlight,
smoothing = x$smoothing_months,
up_is_good = x$up_is_good,
notes = x$caption
)
})
mapply(
function(table, table_name){
path <- path_src(paste0("Table", table_name, ".svelte"))
writeLines(table, path)
},
table = table_list,
table_name = names(table_list)
)
}
df
sparkcolour <- rep(pal, ceiling(length(series_ids) / length(pal)))
sparkcolour
sparkdata <- df[
date >= max(date) - months(12 * 3),
sparkline(value, colour = sparkcolour[.GRP]),
series_id
]
sparkdata
sparkdata <- df[
date >= max(date) - months(12 * 3),
.(sparkline = sparkline(value, colour = sparkcolour[.GRP])),
series_id
]
sparkdata[, writeLines(sparkline, path_sparkline(series_id)), series_id]
source("C:/JSprojects/viclabour/R/functions.R", echo=TRUE)
if(length(to_update) > 0){
message(
"Updating the following website tables:\n",
paste(to_update, collapse = "\n")
)
table_list <- split(
table_meta[table_name %in% to_update],
by = "table_name"
)
table_list <- lapply(table_list, \(x){
make_table(
series_ids = x$series_id,
row_headers = x$name,
highlight_rows = x$highlight,
smoothing = x$smoothing_months,
up_is_good = x$up_is_good,
notes = x$caption
)
})
mapply(
function(table, table_name){
path <- path_src(paste0("Table", table_name, ".svelte"))
writeLines(table, path)
},
table = table_list,
table_name = names(table_list)
)
}
